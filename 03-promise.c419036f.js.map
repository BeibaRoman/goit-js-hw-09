{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,SAAUC,SAASC,cAAc,UAsCnC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA7CbN,EAAKC,SAASa,iBAAiB,UAE/B,SAAsBC,GACpBA,EAAIC,iBACJ,MAAQV,MAAAW,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAIK,cAAcC,SAC5CC,EAAaC,OAAON,EAAMO,OAC1BC,EAAYF,OAAOL,EAAKM,OACxBE,EAAcH,OAAOJ,EAAOK,OAElC,IAAK,IAAIG,EAAW,EAAGA,GAAYD,EAAaC,GAAY,EACzC,IAAbA,EACFvB,EAAcuB,EAAUL,GACrBM,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBR,EAAA+B,OAAOC,QAAQ,uBAAqBzB,QAAiBC,MAAU,IAEhEyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBR,EAAA+B,OAAOG,QAAQ,sBAAoB3B,QAAiBC,MAAU,IAGlEF,EAAcuB,EAAUL,EAAaG,GAAaE,EAAW,IAC1DC,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBR,EAAA+B,OAAOC,QAAQ,uBAAqBzB,QAAiBC,MAAU,IAEhEyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBR,EAAA+B,OAAOG,QAAQ,sBAAoB3B,QAAeC,MAAU,IAIpEN,EAAKC,SAASgC,O","sources":["src/js/03-promise.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  mainForm: document.querySelector('.form'),\n};\nrefs.mainForm.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  const { delay, step, amount } = evt.currentTarget.elements;\n  const delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n\n  for (let position = 1; position <= amountValue; position += 1) {\n    if (position === 1) {\n      createPromise(position, delayValue)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    } else {\n      createPromise(position, delayValue + stepValue * (position - 1))\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n  }\n  refs.mainForm.reset();\n}\n\n\n\n\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$fa731149d7840060$var$refs","mainForm","document","querySelector","$fa731149d7840060$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","delay1","step","amount","currentTarget","elements","delayValue","Number","value","stepValue","amountValue","position1","then","Notify","success","catch","failure","reset"],"version":3,"file":"03-promise.c419036f.js.map"}